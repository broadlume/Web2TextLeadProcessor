diff --git a/dist/cjs/src/context.d.ts b/dist/cjs/src/context.d.ts
index 137b6d3d5466fcef9f36cc315c00d482f601a185..c3c97b4ca3bb0f9a059abc126449a11da976e653 100644
--- a/dist/cjs/src/context.d.ts
+++ b/dist/cjs/src/context.d.ts
@@ -50,6 +50,8 @@ export interface KeyValueStore<TState extends TypedState> {
      */
     get<TValue, TKey extends keyof TState = string>(name: TState extends UntypedState ? string : TKey): Promise<(TState extends UntypedState ? TValue : TState[TKey]) | null>;
     stateKeys(): Promise<Array<string>>;
+    getAll(): Promise<(TState extends UntypedState ? object : TState)>;
+    update(operation: (state:(TState extends UntypedState ? object : TState)) => TState): Promise<void>;
     /**
      * Set/store state in the Restate runtime.
      * Note that state objects are serialized with `Buffer.from(JSON.stringify(theObject))`
@@ -415,6 +417,8 @@ export interface ObjectSharedContext<TState extends TypedState = UntypedState> e
      * const state = await ctx.get<string>("STATE");
      */
     get<TValue, TKey extends keyof TState = string>(name: TState extends UntypedState ? string : TKey): Promise<(TState extends UntypedState ? TValue : TState[TKey]) | null>;
+
+    getAll(): Promise<(TState extends UntypedState ? object : TState)>;
     /**
      * Retrieve all the state keys for this object.
      */
diff --git a/dist/cjs/src/context_impl.d.ts b/dist/cjs/src/context_impl.d.ts
index 6a1484e70c92e102567d5af87dee008f6874c71a..e1ec92ec543b933de4d3d327a1bff29232d4b15d 100644
--- a/dist/cjs/src/context_impl.d.ts
+++ b/dist/cjs/src/context_impl.d.ts
@@ -27,6 +27,8 @@ export declare class ContextImpl implements ObjectContext, WorkflowContext {
     get<T>(name: string): Promise<T | null>;
     stateKeys(): Promise<Array<string>>;
     set<T>(name: string, value: T): void;
+    getAll(): Promise<unknown>;
+    update(operation: (state: unknown) => unknown): Promise;
     clear(name: string): void;
     clearAll(): void;
     private invoke;
diff --git a/dist/cjs/src/context_impl.js b/dist/cjs/src/context_impl.js
index 1c6ad0385ad60abef59fc4cc12947d8e5785cb6b..bc7e3e1a2513016c57b4625060e8aedbcc5df2b8 100644
--- a/dist/cjs/src/context_impl.js
+++ b/dist/cjs/src/context_impl.js
@@ -131,6 +131,19 @@ class ContextImpl {
             .handleUserCodeMessage(protocol_js_1.SET_STATE_ENTRY_MESSAGE_TYPE, msg)
             .catch((e) => this.stateMachine.handleDanglingPromiseError(e));
     }
+    async getAll() {
+        const keys = await this.stateKeys();
+        const entries = await Promise.all(keys.map(async (k) => [k, await this.get(k)]));
+        return Object.fromEntries(entries);
+    }
+    async update(operation) {
+        const state = await this.getAll();
+        const newState = operation(state);
+        await this.clearAll();
+        for (const key of Object.keys(newState)) {
+            this.set(key,newState[key]);
+        }
+    }
     clear(name) {
         this.checkState("clear state");
         const msg = this.stateMachine.localStateStore.clear(name);
diff --git a/dist/esm/src/context.d.ts b/dist/esm/src/context.d.ts
index 55a95a023ac77c39688286dd0296f11cdc55565b..829fd91ed01e4a35f4e8f5a10094e757b33de005 100644
--- a/dist/esm/src/context.d.ts
+++ b/dist/esm/src/context.d.ts
@@ -49,6 +49,7 @@ export interface KeyValueStore<TState extends TypedState> {
      * const state = await ctx.get<string>("STATE");
      */
     get<TValue, TKey extends keyof TState = string>(name: TState extends UntypedState ? string : TKey): Promise<(TState extends UntypedState ? TValue : TState[TKey]) | null>;
+    getAll(): Promise<(TState extends UntypedState ? object : TState)>;
     stateKeys(): Promise<Array<string>>;
     /**
      * Set/store state in the Restate runtime.
@@ -62,6 +63,7 @@ export interface KeyValueStore<TState extends TypedState> {
      * ctx.set("STATE", "Hello");
      */
     set<TValue, TKey extends keyof TState = string>(name: TState extends UntypedState ? string : TKey, value: TState extends UntypedState ? TValue : TState[TKey]): void;
+    update(operation: (state:(TState extends UntypedState ? object : TState)) => TState): Promise<void>;
     /**
      * Clear/delete state in the Restate runtime.
      * @param name key of the state to delete
@@ -415,6 +417,7 @@ export interface ObjectSharedContext<TState extends TypedState = UntypedState> e
      * const state = await ctx.get<string>("STATE");
      */
     get<TValue, TKey extends keyof TState = string>(name: TState extends UntypedState ? string : TKey): Promise<(TState extends UntypedState ? TValue : TState[TKey]) | null>;
+    getAll(): Promise<(TState extends UntypedState ? object : TState)>;
     /**
      * Retrieve all the state keys for this object.
      */
diff --git a/dist/esm/src/context_impl.d.ts b/dist/esm/src/context_impl.d.ts
index 9a07b344dc81a30a2a66698cbe6fa8b5a040e7d3..384e3f801f38a48ba7f25f78589a6f005114f971 100644
--- a/dist/esm/src/context_impl.d.ts
+++ b/dist/esm/src/context_impl.d.ts
@@ -29,6 +29,8 @@ export declare class ContextImpl implements ObjectContext, WorkflowContext {
     set<T>(name: string, value: T): void;
     clear(name: string): void;
     clearAll(): void;
+    getAll(): Promise<unknown>;
+    update(operation: (state: unknown) => unknown): Promise<void>;
     private invoke;
     private invokeOneWay;
     serviceClient<D>({ name }: ServiceDefinitionFrom<D>): Client<Service<D>>;
diff --git a/dist/esm/src/context_impl.js b/dist/esm/src/context_impl.js
index 23e08406c72e4d620f5037f2c014ec7502ed0155..29e1780949c0e72a4dfff1db62deb76274844972 100644
--- a/dist/esm/src/context_impl.js
+++ b/dist/esm/src/context_impl.js
@@ -121,6 +121,19 @@ export class ContextImpl {
         };
         return getStateKeys();
     }
+    async getAll() {
+        const keys = await this.stateKeys();
+        const entries = await Promise.all(keys.map(async (k) => [k, await this.get(k)]));
+        return Object.fromEntries(entries);
+    }
+    async update(operation) {
+        const state = await this.getAll();
+        const newState = operation(state);
+        await this.clearAll();
+        for (const key of Object.keys(newState)) {
+            this.set(key,newState[key]);
+        }
+    }
     set(name, value) {
         this.checkState("set state");
         const msg = this.stateMachine.localStateStore.set(name, value);
