diff --git a/dist/cjs/src/context.d.ts b/dist/cjs/src/context.d.ts
index 75a0b1431ff8049d5a41fd8b190ac8cb0f08e28d..5f1467fb10e352438b7e467f676e9b1d8149c73c 100644
--- a/dist/cjs/src/context.d.ts
+++ b/dist/cjs/src/context.d.ts
@@ -47,6 +47,8 @@ export type UntypedState = {
  * Key value store operations. Only keyed services have an attached key-value store.
  */
 export interface KeyValueStore<TState extends TypedState> {
+    getAll(): Promise<(TState extends UntypedState ? object : TState)>;
+    update(operation: (state:(TState extends UntypedState ? object : TState)) => TState): Promise<void>;
     /**
      * Get/retrieve state from the Restate runtime.
      * Note that state objects are serialized with `Buffer.from(JSON.stringify(theObject))`
@@ -445,6 +447,8 @@ export interface ObjectContext<TState extends TypedState = UntypedState> extends
  */
 export interface ObjectSharedContext<TState extends TypedState = UntypedState> extends Context, RestateObjectSharedContext {
     key: string;
+    getAll(): Promise<(TState extends UntypedState ? object : TState)>;
+    update(operation: (state:(TState extends UntypedState ? object : TState)) => TState): Promise<void>;
     /**
      * Get/retrieve state from the Restate runtime.
      * Note that state objects are serialized with `Buffer.from(JSON.stringify(theObject))`
diff --git a/dist/cjs/src/context_impl.d.ts b/dist/cjs/src/context_impl.d.ts
index 6189902b184242689a9e35b156856edaacaa588b..f834c7d28ff22217d02d5a8687530de7d19f13ca 100644
--- a/dist/cjs/src/context_impl.d.ts
+++ b/dist/cjs/src/context_impl.d.ts
@@ -21,6 +21,8 @@ export declare class ContextImpl implements ObjectContext, WorkflowContext {
     promise<T>(name: string, serde?: Serde<T>): DurablePromise<T>;
     get key(): string;
     request(): Request;
+    getAll(): Promise<object>;
+    update(operation: (state: object) => unknown): Promise<void>;
     get<T>(name: string, serde?: Serde<T>): Promise<T | null>;
     stateKeys(): Promise<Array<string>>;
     set<T>(name: string, value: T, serde?: Serde<T>): void;
diff --git a/dist/cjs/src/context_impl.js b/dist/cjs/src/context_impl.js
index f11ad0c564bb7f41e5676ec061efa089848addd9..938e2aa069e6a167f7fd6cadcfa78d0f64992443 100644
--- a/dist/cjs/src/context_impl.js
+++ b/dist/cjs/src/context_impl.js
@@ -101,6 +101,22 @@ class ContextImpl {
         };
         return getState();
     }
+    async getAll() {
+        const keys = await this.stateKeys();
+        const entries = [];
+        for (const key of keys) {
+            entries.push([key,await this.get(key)]);
+        }
+        return Object.fromEntries(entries);
+    }
+    async update(operation) {
+        const state = await this.getAll();
+        const newState = operation(state);
+        await this.clearAll();
+        for (const key of Object.keys(newState)) {
+            this.set(key,newState[key]);
+        }
+    }
     // DON'T make this function async!!! see sideEffect comment for details.
     stateKeys() {
         // Check if this is a valid action
diff --git a/dist/esm/src/context.d.ts b/dist/esm/src/context.d.ts
index 8732ff823402b4efe91227098bcc9e61888c83cf..2f0afbadc6774f05c635e7ff1ab4abba8e566d03 100644
--- a/dist/esm/src/context.d.ts
+++ b/dist/esm/src/context.d.ts
@@ -47,6 +47,8 @@ export type UntypedState = {
  * Key value store operations. Only keyed services have an attached key-value store.
  */
 export interface KeyValueStore<TState extends TypedState> {
+    getAll(): Promise<(TState extends UntypedState ? object : TState)>;
+    update(operation: (state:(TState extends UntypedState ? object : TState)) => TState): Promise<void>;
     /**
      * Get/retrieve state from the Restate runtime.
      * Note that state objects are serialized with `Buffer.from(JSON.stringify(theObject))`
@@ -445,6 +447,8 @@ export interface ObjectContext<TState extends TypedState = UntypedState> extends
  */
 export interface ObjectSharedContext<TState extends TypedState = UntypedState> extends Context, RestateObjectSharedContext {
     key: string;
+    getAll(): Promise<(TState extends UntypedState ? object : TState)>;
+    update(operation: (state:(TState extends UntypedState ? object : TState)) => TState): Promise<void>;
     /**
      * Get/retrieve state from the Restate runtime.
      * Note that state objects are serialized with `Buffer.from(JSON.stringify(theObject))`
diff --git a/dist/esm/src/context_impl.d.ts b/dist/esm/src/context_impl.d.ts
index 400a985f8f6cea15a91dcb9d4f3bbbb889e81846..64508565498441ef52393ebac06eccb9515ce432 100644
--- a/dist/esm/src/context_impl.d.ts
+++ b/dist/esm/src/context_impl.d.ts
@@ -21,6 +21,8 @@ export declare class ContextImpl implements ObjectContext, WorkflowContext {
     promise<T>(name: string, serde?: Serde<T>): DurablePromise<T>;
     get key(): string;
     request(): Request;
+    getAll(): Promise<object>;
+    update(operation: (state: object) => unknown): Promise<void>;
     get<T>(name: string, serde?: Serde<T>): Promise<T | null>;
     stateKeys(): Promise<Array<string>>;
     set<T>(name: string, value: T, serde?: Serde<T>): void;
diff --git a/dist/esm/src/context_impl.js b/dist/esm/src/context_impl.js
index 4658d495a497116ec28d1f5c5fb866ebf88c9266..28eab18c30066245cd1d702ffcb6cf547ddacaa0 100644
--- a/dist/esm/src/context_impl.js
+++ b/dist/esm/src/context_impl.js
@@ -98,6 +98,22 @@ export class ContextImpl {
         };
         return getState();
     }
+    async getAll() {
+        const keys = await this.stateKeys();
+        const entries = [];
+        for (const key of keys) {
+            entries.push([key,await this.get(key)]);
+        }
+        return Object.fromEntries(entries);
+    }
+    async update(operation) {
+        const state = await this.getAll();
+        const newState = operation(state);
+        await this.clearAll();
+        for (const key of Object.keys(newState)) {
+            this.set(key,newState[key]);
+        }
+    }
     // DON'T make this function async!!! see sideEffect comment for details.
     stateKeys() {
         // Check if this is a valid action
