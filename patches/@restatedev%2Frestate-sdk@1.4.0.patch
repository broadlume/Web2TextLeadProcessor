diff --git a/dist/cjs/src/context.d.ts b/dist/cjs/src/context.d.ts
index 41b5412320a3588f4311048e1e8f80cf10a6f521..7d7a4c8bbf287552ae9f7008dfa75c8332028c88 100644
--- a/dist/cjs/src/context.d.ts
+++ b/dist/cjs/src/context.d.ts
@@ -1,4 +1,5 @@
 /// <reference types="node" />
+import type { Jsonify } from "type-fest";
 import type { Client, SendClient } from "./types/rpc.js";
 import type { RestateContext, RestateObjectContext, RestateObjectSharedContext, RestateWorkflowContext, RestateWorkflowSharedContext, Service, ServiceDefinitionFrom, VirtualObject, VirtualObjectDefinitionFrom, Workflow, WorkflowDefinitionFrom, Serde } from "@restatedev/restate-sdk-core";
 /**
@@ -47,6 +48,8 @@ export type UntypedState = {
  * Key value store operations. Only keyed services have an attached key-value store.
  */
 export interface KeyValueStore<TState extends TypedState> {
+    getAll(): Promise<(TState extends UntypedState ? object : TState)>;
+    update(operation: (state:(TState extends UntypedState ? object : TState)) => TState): Promise<void>;
     /**
      * Get/retrieve state from the Restate runtime.
      * Note that state objects are serialized with `Buffer.from(JSON.stringify(theObject))`
@@ -265,7 +268,7 @@ export interface Context extends RestateContext {
      *
      * @param action The function to run.
      */
-    run<T>(action: RunAction<T>): Promise<T>;
+    run<T>(action: RunAction<T>): Promise<Jsonify<T>>;
     /**
      * Run an operation and store the result in Restate. The operation will thus not
      * be re-run during a later replay, but take the durable result from Restate.
@@ -273,8 +276,8 @@ export interface Context extends RestateContext {
      * @param name the action's name
      * @param action the action to run.
      */
-    run<T>(name: string, action: RunAction<T>): Promise<T>;
-    run<T>(name: string, action: RunAction<T>, options: RunOptions<T>): Promise<T>;
+    run<T>(name: string, action: RunAction<T>): Promise<Jsonify<T>>;
+    run<T>(name: string, action: RunAction<T>, options: RunOptions<T>): Promise<Jsonify<T>>;
     /**
      * Register an awakeable and pause the processing until the awakeable ID (and optional payload) have been returned to the service
      * (via ctx.completeAwakeable(...)). The SDK deserializes the payload with `JSON.parse(result.toString()) as T`.
@@ -478,6 +481,8 @@ export interface ObjectContext<TState extends TypedState = UntypedState> extends
  */
 export interface ObjectSharedContext<TState extends TypedState = UntypedState> extends Context, RestateObjectSharedContext {
     key: string;
+    getAll(): Promise<(TState extends UntypedState ? object : TState)>;
+    update(operation: (state:(TState extends UntypedState ? object : TState)) => TState): Promise<void>;
     /**
      * Get/retrieve state from the Restate runtime.
      * Note that state objects are serialized with `Buffer.from(JSON.stringify(theObject))`
diff --git a/dist/cjs/src/context_impl.d.ts b/dist/cjs/src/context_impl.d.ts
index 2c46350bfb9a5c71c7b9e5bd9abc7df90c3f331f..1d76063310c5d33bc048788caf3f81585113a7c8 100644
--- a/dist/cjs/src/context_impl.d.ts
+++ b/dist/cjs/src/context_impl.d.ts
@@ -8,6 +8,7 @@ import type { Serde, Service, ServiceDefinitionFrom, VirtualObject, VirtualObjec
 import type { Headers } from "./endpoint/handlers/generic.js";
 import type { ReadableStreamDefaultReader, WritableStreamDefaultWriter } from "node:stream/web";
 import type { CompletablePromise } from "./utils/completable_promise.js";
+import type { Jsonify } from "type-fest";
 export type InternalCombineablePromise<T> = CombineablePromise<T> & {
     asyncResultHandle: number;
 };
@@ -27,6 +28,8 @@ export declare class ContextImpl implements ObjectContext, WorkflowContext {
     get key(): string;
     request(): Request;
     get<T>(name: string, serde?: Serde<T>): Promise<T | null>;
+    getAll(): Promise<object>;
+    update(operation: (state: object) => unknown): Promise<void>;
     stateKeys(): Promise<Array<string>>;
     set<T>(name: string, value: T, serde?: Serde<T>): void;
     clear(name: string): void;
@@ -39,7 +42,7 @@ export declare class ContextImpl implements ObjectContext, WorkflowContext {
     serviceSendClient<D>({ name }: ServiceDefinitionFrom<D>, opts?: SendOptions): SendClient<Service<D>>;
     objectSendClient<D>({ name }: VirtualObjectDefinitionFrom<D>, key: string, opts?: SendOptions): SendClient<VirtualObject<D>>;
     workflowSendClient<D>({ name }: WorkflowDefinitionFrom<D>, key: string, opts?: SendOptions): SendClient<Workflow<D>>;
-    run<T>(nameOrAction: string | RunAction<T>, actionSecondParameter?: RunAction<T>, options?: RunOptions<T>): Promise<T>;
+    run<T>(nameOrAction: string | RunAction<T>, actionSecondParameter?: RunAction<T>, options?: RunOptions<T>): Promise<Jsonify<T>>;
     sleep(millis: number): CombineablePromise<void>;
     awakeable<T>(serde?: Serde<T>): {
         id: string;
diff --git a/dist/cjs/src/context_impl.js b/dist/cjs/src/context_impl.js
index a0428242c38d3a342e7dfdcecde6bedb30c5b1ae..41a5170b73b7858d751deb03d8086483a44caadd 100644
--- a/dist/cjs/src/context_impl.js
+++ b/dist/cjs/src/context_impl.js
@@ -118,6 +118,22 @@ class ContextImpl {
     clearAll() {
         this.processNonCompletableEntry((vm) => vm.sys_clear_all_state());
     }
+    async getAll() {
+        const keys = await this.stateKeys();
+        const entries = [];
+        for (const key of keys) {
+            entries.push([key,await this.get(key)]);
+        }
+        return Object.fromEntries(entries);
+    }
+    async update(operation) {
+        const state = await this.getAll();
+        const newState = operation(state);
+        this.clearAll();
+        for (const key of Object.keys(newState)) {
+            this.set(key,newState[key]);
+        }
+    }
     // --- Calls, background calls, etc
     //
     genericCall(call) {
diff --git a/dist/cjs/src/endpoint/handlers/generic.js b/dist/cjs/src/endpoint/handlers/generic.js
index 97207054c8c256a08ff82126abc2bda7249aa5f9..74e307d458cd34633303e45cd70097864c6fbcd6 100644
--- a/dist/cjs/src/endpoint/handlers/generic.js
+++ b/dist/cjs/src/endpoint/handlers/generic.js
@@ -43,6 +43,7 @@ const context_impl_js_1 = require("../../context_impl.js");
 const logger_js_1 = require("../../logger.js");
 const vm = __importStar(require("./vm/sdk_shared_core_wasm_bindings.js"));
 const completable_promise_js_1 = require("../../utils/completable_promise.js");
+const HandlerKind = require("../../types/rpc.js");
 var ServiceDiscoveryProtocolVersion;
 (function (ServiceDiscoveryProtocolVersion) {
     /**
@@ -199,7 +200,7 @@ class GenericHandler {
         // Get input
         const input = coreVm.sys_input();
         // Prepare context
-        const console = (0, logger_js_1.createRestateConsole)(this.endpoint.logger, logger_js_1.LogSource.USER, new logger_js_1.LoggerContext(input.invocation_id, "", handler.component().name(), handler.name(), additionalContext), () => !coreVm.is_processing());
+        const console = (0, logger_js_1.createRestateConsole)(this.endpoint.logger, logger_js_1.LogSource.USER, new logger_js_1.LoggerContext(input.invocation_id, handler.component().name(), handler.name(), handler.kind() === HandlerKind.SERVICE ? undefined : input.key, additionalContext), () => !coreVm.is_processing());
         // This promise is used to signal the end of the computation,
         // which can be either the user returns a value,
         // or an exception gets catched, or the state machine fails/suspends.
diff --git a/dist/cjs/src/logger.d.ts b/dist/cjs/src/logger.d.ts
index 497d4f4d31a063c34433a6e4955f5d69f2f4f05c..b7a1581d45844a88dee9e1681f69a862ead8f711 100644
--- a/dist/cjs/src/logger.d.ts
+++ b/dist/cjs/src/logger.d.ts
@@ -21,8 +21,8 @@ export declare class LoggerContext {
     readonly additionalContext?: {
         [name: string]: string;
     } | undefined;
-    readonly fqMethodName: string;
-    constructor(invocationId: string, packageName: string, serviceName: string, handlerName: string, additionalContext?: {
+    readonly invocationTarget: string;
+    constructor(invocationId: string, serviceName: string, handlerName: string, key: string, additionalContext?: {
         [name: string]: string;
     } | undefined);
 }
diff --git a/dist/cjs/src/logger.js b/dist/cjs/src/logger.js
index b8267e2800a99ac7653e7b9bc2b90d2daa5cfff5..9eea228332e06bed1de01c6aae4a9f62146f9e5d 100644
--- a/dist/cjs/src/logger.js
+++ b/dist/cjs/src/logger.js
@@ -96,13 +96,14 @@ function readRestateLogLevel() {
 class LoggerContext {
     invocationId;
     additionalContext;
-    fqMethodName;
-    constructor(invocationId, packageName, serviceName, handlerName, additionalContext) {
+    invocationTarget;
+    constructor(invocationId, serviceName, handlerName, key, additionalContext) {
         this.invocationId = invocationId;
         this.additionalContext = additionalContext;
-        this.fqMethodName = packageName
-            ? `${packageName}.${serviceName}/${handlerName}`
-            : `${serviceName}/${handlerName}`;
+        this.invocationTarget =
+              key === undefined || key.length === 0
+                ? `${serviceName}/${handlerName}`
+                : `${serviceName}/${key}/${handlerName}`;
     }
 }
 exports.LoggerContext = LoggerContext;
@@ -110,7 +111,7 @@ function formatLogPrefix(context) {
     if (context === undefined) {
         return "[restate] ";
     }
-    let prefix = `[restate] [${context.fqMethodName}][${context.invocationId}]`;
+    let prefix = `[restate] [${context.invocationTarget}][${context.invocationId}]`;
     if (context.additionalContext !== undefined) {
         for (const [k, v] of Object.entries(context.additionalContext)) {
             prefix = prefix + `[${k}: ${v}]`;
diff --git a/dist/esm/src/context.d.ts b/dist/esm/src/context.d.ts
index aff120968c817e65cf6979f395ead8c9d94d47a0..c322ade885e0926a2778d556f996ce5147ec56eb 100644
--- a/dist/esm/src/context.d.ts
+++ b/dist/esm/src/context.d.ts
@@ -1,6 +1,7 @@
 /// <reference types="node" resolution-mode="require"/>
 import type { Client, SendClient } from "./types/rpc.js";
 import type { RestateContext, RestateObjectContext, RestateObjectSharedContext, RestateWorkflowContext, RestateWorkflowSharedContext, Service, ServiceDefinitionFrom, VirtualObject, VirtualObjectDefinitionFrom, Workflow, WorkflowDefinitionFrom, Serde } from "@restatedev/restate-sdk-core";
+import type { Jsonify } from "type-fest";
 /**
  * Represents the original request as sent to this handler.
  *
@@ -47,6 +48,8 @@ export type UntypedState = {
  * Key value store operations. Only keyed services have an attached key-value store.
  */
 export interface KeyValueStore<TState extends TypedState> {
+    getAll(): Promise<(TState extends UntypedState ? object : TState)>;
+    update(operation: (state:(TState extends UntypedState ? object : TState)) => TState): Promise<void>;
     /**
      * Get/retrieve state from the Restate runtime.
      * Note that state objects are serialized with `Buffer.from(JSON.stringify(theObject))`
@@ -265,7 +268,7 @@ export interface Context extends RestateContext {
      *
      * @param action The function to run.
      */
-    run<T>(action: RunAction<T>): Promise<T>;
+    run<T>(action: RunAction<T>): Promise<Jsonify<T>>;
     /**
      * Run an operation and store the result in Restate. The operation will thus not
      * be re-run during a later replay, but take the durable result from Restate.
@@ -273,8 +276,8 @@ export interface Context extends RestateContext {
      * @param name the action's name
      * @param action the action to run.
      */
-    run<T>(name: string, action: RunAction<T>): Promise<T>;
-    run<T>(name: string, action: RunAction<T>, options: RunOptions<T>): Promise<T>;
+    run<T>(name: string, action: RunAction<T>): Promise<Jsonify<T>>;
+    run<T>(name: string, action: RunAction<T>, options: RunOptions<T>): Promise<Jsonify<T>>;
     /**
      * Register an awakeable and pause the processing until the awakeable ID (and optional payload) have been returned to the service
      * (via ctx.completeAwakeable(...)). The SDK deserializes the payload with `JSON.parse(result.toString()) as T`.
@@ -478,6 +481,8 @@ export interface ObjectContext<TState extends TypedState = UntypedState> extends
  */
 export interface ObjectSharedContext<TState extends TypedState = UntypedState> extends Context, RestateObjectSharedContext {
     key: string;
+    getAll(): Promise<(TState extends UntypedState ? object : TState)>;
+    update(operation: (state:(TState extends UntypedState ? object : TState)) => TState): Promise<void>;
     /**
      * Get/retrieve state from the Restate runtime.
      * Note that state objects are serialized with `Buffer.from(JSON.stringify(theObject))`
diff --git a/dist/esm/src/context_impl.d.ts b/dist/esm/src/context_impl.d.ts
index aee37de40ec7f53d6a94999cb25d1cbf05e781da..dde3ae869f0158815acb331c4ae8f8043d003426 100644
--- a/dist/esm/src/context_impl.d.ts
+++ b/dist/esm/src/context_impl.d.ts
@@ -8,6 +8,7 @@ import type { Serde, Service, ServiceDefinitionFrom, VirtualObject, VirtualObjec
 import type { Headers } from "./endpoint/handlers/generic.js";
 import type { ReadableStreamDefaultReader, WritableStreamDefaultWriter } from "node:stream/web";
 import type { CompletablePromise } from "./utils/completable_promise.js";
+import type { Jsonify } from "type-fest";
 export type InternalCombineablePromise<T> = CombineablePromise<T> & {
     asyncResultHandle: number;
 };
@@ -29,6 +30,8 @@ export declare class ContextImpl implements ObjectContext, WorkflowContext {
     get<T>(name: string, serde?: Serde<T>): Promise<T | null>;
     stateKeys(): Promise<Array<string>>;
     set<T>(name: string, value: T, serde?: Serde<T>): void;
+    getAll(): Promise<object>;
+    update(operation: (state: object) => unknown): Promise<void>;
     clear(name: string): void;
     clearAll(): void;
     genericCall<REQ = Uint8Array, RES = Uint8Array>(call: GenericCall<REQ, RES>): CombineablePromise<RES>;
@@ -39,7 +42,7 @@ export declare class ContextImpl implements ObjectContext, WorkflowContext {
     serviceSendClient<D>({ name }: ServiceDefinitionFrom<D>, opts?: SendOptions): SendClient<Service<D>>;
     objectSendClient<D>({ name }: VirtualObjectDefinitionFrom<D>, key: string, opts?: SendOptions): SendClient<VirtualObject<D>>;
     workflowSendClient<D>({ name }: WorkflowDefinitionFrom<D>, key: string, opts?: SendOptions): SendClient<Workflow<D>>;
-    run<T>(nameOrAction: string | RunAction<T>, actionSecondParameter?: RunAction<T>, options?: RunOptions<T>): Promise<T>;
+    run<T>(nameOrAction: string | RunAction<T>, actionSecondParameter?: RunAction<T>, options?: RunOptions<T>): Promise<Jsonify<T>>;
     sleep(millis: number): CombineablePromise<void>;
     awakeable<T>(serde?: Serde<T>): {
         id: string;
diff --git a/dist/esm/src/context_impl.js b/dist/esm/src/context_impl.js
index 462b435f5b999221156f1e2c88de8732912d3a77..c9ce00bdc319e8b6c6d1cc9d03c437420e5751c5 100644
--- a/dist/esm/src/context_impl.js
+++ b/dist/esm/src/context_impl.js
@@ -115,6 +115,22 @@ export class ContextImpl {
     clearAll() {
         this.processNonCompletableEntry((vm) => vm.sys_clear_all_state());
     }
+    async getAll() {
+        const keys = await this.stateKeys();
+        const entries = [];
+        for (const key of keys) {
+            entries.push([key,await this.get(key)]);
+        }
+        return Object.fromEntries(entries);
+    }
+    async update(operation) {
+        const state = await this.getAll();
+        const newState = operation(state);
+        await this.clearAll();
+        for (const key of Object.keys(newState)) {
+            this.set(key,newState[key]);
+        }
+    }
     // --- Calls, background calls, etc
     //
     genericCall(call) {
diff --git a/dist/esm/src/endpoint/handlers/generic.js b/dist/esm/src/endpoint/handlers/generic.js
index 3648c7975836340d4b5783fc1c97568bfdc34565..4a580a33ac4b11c0f22f75c53f9a324c9a3656ad 100644
--- a/dist/esm/src/endpoint/handlers/generic.js
+++ b/dist/esm/src/endpoint/handlers/generic.js
@@ -17,6 +17,7 @@ import { ContextImpl } from "../../context_impl.js";
 import { createRestateConsole, DEFAULT_LOGGER_LOG_LEVEL, defaultLogger, LoggerContext, LogSource, RestateLogLevel, } from "../../logger.js";
 import * as vm from "./vm/sdk_shared_core_wasm_bindings.js";
 import { CompletablePromise } from "../../utils/completable_promise.js";
+import { HandlerKind } from "../../types/rpc.js";
 export var ServiceDiscoveryProtocolVersion;
 (function (ServiceDiscoveryProtocolVersion) {
     /**
@@ -173,7 +174,7 @@ export class GenericHandler {
         // Get input
         const input = coreVm.sys_input();
         // Prepare context
-        const console = createRestateConsole(this.endpoint.logger, LogSource.USER, new LoggerContext(input.invocation_id, "", handler.component().name(), handler.name(), additionalContext), () => !coreVm.is_processing());
+        const console = createRestateConsole(this.endpoint.logger, LogSource.USER, new LoggerContext(input.invocation_id, handler.component().name(), handler.name(),handler.kind() === HandlerKind.SERVICE ? undefined : input.key, additionalContext), () => !coreVm.is_processing());
         // This promise is used to signal the end of the computation,
         // which can be either the user returns a value,
         // or an exception gets catched, or the state machine fails/suspends.
diff --git a/dist/esm/src/logger.d.ts b/dist/esm/src/logger.d.ts
index 7323170f11bce3b49be15ac86c5192b6caf2ca3c..5ed1283d688aecb0424239363b8b7f5d5ff93eed 100644
--- a/dist/esm/src/logger.d.ts
+++ b/dist/esm/src/logger.d.ts
@@ -21,8 +21,8 @@ export declare class LoggerContext {
     readonly additionalContext?: {
         [name: string]: string;
     } | undefined;
-    readonly fqMethodName: string;
-    constructor(invocationId: string, packageName: string, serviceName: string, handlerName: string, additionalContext?: {
+    readonly invocationTarget: string;
+    constructor(invocationId: string, serviceName: string, handlerName: string, key: string, additionalContext?: {
         [name: string]: string;
     } | undefined);
 }
diff --git a/dist/esm/src/logger.js b/dist/esm/src/logger.js
index 6f49c156ff406fd558c7bd94ee1673b6f66a9196..351a6bb4b050a99435431935c09d2b68318f77e7 100644
--- a/dist/esm/src/logger.js
+++ b/dist/esm/src/logger.js
@@ -91,20 +91,21 @@ function readRestateLogLevel() {
 export class LoggerContext {
     invocationId;
     additionalContext;
-    fqMethodName;
-    constructor(invocationId, packageName, serviceName, handlerName, additionalContext) {
+    invocationTarget;
+    constructor(invocationId, serviceName, handlerName, key, additionalContext) {
         this.invocationId = invocationId;
         this.additionalContext = additionalContext;
-        this.fqMethodName = packageName
-            ? `${packageName}.${serviceName}/${handlerName}`
-            : `${serviceName}/${handlerName}`;
+        this.invocationTarget =
+              key === undefined || key.length === 0
+                ? `${serviceName}/${handlerName}`
+                : `${serviceName}/${key}/${handlerName}`;
     }
 }
 function formatLogPrefix(context) {
     if (context === undefined) {
         return "[restate] ";
     }
-    let prefix = `[restate] [${context.fqMethodName}][${context.invocationId}]`;
+    let prefix = `[restate] [${context.invocationTarget}][${context.invocationId}]`;
     if (context.additionalContext !== undefined) {
         for (const [k, v] of Object.entries(context.additionalContext)) {
             prefix = prefix + `[${k}: ${v}]`;
