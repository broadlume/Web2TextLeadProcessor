diff --git a/dist/cjs/src/context.d.ts b/dist/cjs/src/context.d.ts
index 41b5412320a3588f4311048e1e8f80cf10a6f521..832fdedd481a1003178e4ffba852b7917896d0aa 100644
--- a/dist/cjs/src/context.d.ts
+++ b/dist/cjs/src/context.d.ts
@@ -47,6 +47,8 @@ export type UntypedState = {
  * Key value store operations. Only keyed services have an attached key-value store.
  */
 export interface KeyValueStore<TState extends TypedState> {
+    getAll(): Promise<(TState extends UntypedState ? object : TState)>;
+    update(operation: (state:(TState extends UntypedState ? object : TState)) => TState): Promise<void>;
     /**
      * Get/retrieve state from the Restate runtime.
      * Note that state objects are serialized with `Buffer.from(JSON.stringify(theObject))`
@@ -478,6 +480,8 @@ export interface ObjectContext<TState extends TypedState = UntypedState> extends
  */
 export interface ObjectSharedContext<TState extends TypedState = UntypedState> extends Context, RestateObjectSharedContext {
     key: string;
+    getAll(): Promise<(TState extends UntypedState ? object : TState)>;
+    update(operation: (state:(TState extends UntypedState ? object : TState)) => TState): Promise<void>;
     /**
      * Get/retrieve state from the Restate runtime.
      * Note that state objects are serialized with `Buffer.from(JSON.stringify(theObject))`
diff --git a/dist/cjs/src/context_impl.d.ts b/dist/cjs/src/context_impl.d.ts
index 2c46350bfb9a5c71c7b9e5bd9abc7df90c3f331f..be6f3547dbe1ed44daacbc35bb4b8cf12a1144ea 100644
--- a/dist/cjs/src/context_impl.d.ts
+++ b/dist/cjs/src/context_impl.d.ts
@@ -27,6 +27,8 @@ export declare class ContextImpl implements ObjectContext, WorkflowContext {
     get key(): string;
     request(): Request;
     get<T>(name: string, serde?: Serde<T>): Promise<T | null>;
+    getAll(): Promise<object>;
+    update(operation: (state: object) => unknown): Promise<void>;
     stateKeys(): Promise<Array<string>>;
     set<T>(name: string, value: T, serde?: Serde<T>): void;
     clear(name: string): void;
diff --git a/dist/cjs/src/context_impl.js b/dist/cjs/src/context_impl.js
index a0428242c38d3a342e7dfdcecde6bedb30c5b1ae..41a5170b73b7858d751deb03d8086483a44caadd 100644
--- a/dist/cjs/src/context_impl.js
+++ b/dist/cjs/src/context_impl.js
@@ -118,6 +118,22 @@ class ContextImpl {
     clearAll() {
         this.processNonCompletableEntry((vm) => vm.sys_clear_all_state());
     }
+    async getAll() {
+        const keys = await this.stateKeys();
+        const entries = [];
+        for (const key of keys) {
+            entries.push([key,await this.get(key)]);
+        }
+        return Object.fromEntries(entries);
+    }
+    async update(operation) {
+        const state = await this.getAll();
+        const newState = operation(state);
+        this.clearAll();
+        for (const key of Object.keys(newState)) {
+            this.set(key,newState[key]);
+        }
+    }
     // --- Calls, background calls, etc
     //
     genericCall(call) {
diff --git a/dist/esm/src/context.d.ts b/dist/esm/src/context.d.ts
index aff120968c817e65cf6979f395ead8c9d94d47a0..80b68a0357a0824f91894e76db7c0c3c8151af6c 100644
--- a/dist/esm/src/context.d.ts
+++ b/dist/esm/src/context.d.ts
@@ -47,6 +47,8 @@ export type UntypedState = {
  * Key value store operations. Only keyed services have an attached key-value store.
  */
 export interface KeyValueStore<TState extends TypedState> {
+    getAll(): Promise<(TState extends UntypedState ? object : TState)>;
+    update(operation: (state:(TState extends UntypedState ? object : TState)) => TState): Promise<void>;
     /**
      * Get/retrieve state from the Restate runtime.
      * Note that state objects are serialized with `Buffer.from(JSON.stringify(theObject))`
@@ -478,6 +480,8 @@ export interface ObjectContext<TState extends TypedState = UntypedState> extends
  */
 export interface ObjectSharedContext<TState extends TypedState = UntypedState> extends Context, RestateObjectSharedContext {
     key: string;
+    getAll(): Promise<(TState extends UntypedState ? object : TState)>;
+    update(operation: (state:(TState extends UntypedState ? object : TState)) => TState): Promise<void>;
     /**
      * Get/retrieve state from the Restate runtime.
      * Note that state objects are serialized with `Buffer.from(JSON.stringify(theObject))`
diff --git a/dist/esm/src/context_impl.d.ts b/dist/esm/src/context_impl.d.ts
index aee37de40ec7f53d6a94999cb25d1cbf05e781da..4e08499127e58794ccc34ac320ea68187e6ac53b 100644
--- a/dist/esm/src/context_impl.d.ts
+++ b/dist/esm/src/context_impl.d.ts
@@ -29,6 +29,8 @@ export declare class ContextImpl implements ObjectContext, WorkflowContext {
     get<T>(name: string, serde?: Serde<T>): Promise<T | null>;
     stateKeys(): Promise<Array<string>>;
     set<T>(name: string, value: T, serde?: Serde<T>): void;
+    getAll(): Promise<object>;
+    update(operation: (state: object) => unknown): Promise<void>;
     clear(name: string): void;
     clearAll(): void;
     genericCall<REQ = Uint8Array, RES = Uint8Array>(call: GenericCall<REQ, RES>): CombineablePromise<RES>;
diff --git a/dist/esm/src/context_impl.js b/dist/esm/src/context_impl.js
index 462b435f5b999221156f1e2c88de8732912d3a77..c9ce00bdc319e8b6c6d1cc9d03c437420e5751c5 100644
--- a/dist/esm/src/context_impl.js
+++ b/dist/esm/src/context_impl.js
@@ -115,6 +115,22 @@ export class ContextImpl {
     clearAll() {
         this.processNonCompletableEntry((vm) => vm.sys_clear_all_state());
     }
+    async getAll() {
+        const keys = await this.stateKeys();
+        const entries = [];
+        for (const key of keys) {
+            entries.push([key,await this.get(key)]);
+        }
+        return Object.fromEntries(entries);
+    }
+    async update(operation) {
+        const state = await this.getAll();
+        const newState = operation(state);
+        await this.clearAll();
+        for (const key of Object.keys(newState)) {
+            this.set(key,newState[key]);
+        }
+    }
     // --- Calls, background calls, etc
     //
     genericCall(call) {
